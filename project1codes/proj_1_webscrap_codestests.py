# -*- coding: utf-8 -*-
"""Proj_1_WebScrap_CodesTests.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16v-SIyoFCTUV0zag7zqxxZt_6CxaZPs7

Project 1 : Some Codings and tests
"""



from bs4 import BeautifulSoup
import requests
import pandas as pd

main_url="https://geokeo.com/database/city/de"

url = main_url
html = requests.get(url)
soup = BeautifulSoup(html.text, 'html.parser')

city_list = soup.find('table', class_='table table-hover table-bordered')

for row in city_list.find_all('tr'):
    cols = row.find_all('td')

    if cols:
      # Structure of City table:
      # [0] City number
      # [1] City name
      # [2] Country
      # [3] Latitude
      # [4] Longitude

      print(cols[0], cols[1])
      print(cols[3].text.strip())
      print(float(cols[3].text.strip()))
    else:
      print('not there')
      print(cols)

    """
    if columns:
        name = cols[1].text.strip()
        latitude = cols[3].text.strip()
        print(name, latitude)
    """

# Get Link to next page

url = "https://geokeo.com/database/city/de"

# Send a GET request to the URL
response = requests.get(url)

# Create a BeautifulSoup object with the response content
soup = BeautifulSoup(response.content, 'html.parser')

next_page_link = soup.find_all('a', class_='page-link')

#print(next_page_link)
#print(type(next_page_link))

for link in next_page_link:
  #print(link)
  if link.text == "Next":
    print('Next page:')
    print(link['href'])
    next_page_url = link['href']
    print(type(next_page_url))

url = "https://geokeo.com/database/city/de"
response = requests.get(url)

# Create a BeautifulSoup object and parse the HTML content
soup = BeautifulSoup(response.content, 'html.parser')

# Find the table containing the city information
#city_table = soup.find('table', {'class': 'table table-striped'})
city_table = soup.find('table', class_='table table-hover table-bordered')


# Iterate through each row in the table and extract the name and latitude
city_data = []
for row in city_table.find_all('tr'):
    columns = row.find_all('td')
    if columns:
        name = columns[1].text.strip()


        #city_data.append({'name': name, 'latitude': latitude})
        print(name)

import pandas as pd

# Define the lambda function
def calculate_distance(city, address, additional_parameter):
    # Simulate calculating the distance between the city, address, and additional parameter
    return round((len(city) + len(address) + int(additional_parameter)) / 3, 2)

# Create a DataFrame
df = pd.DataFrame({'City': ['Aachen', 'Augsburg', 'Bergisch Gladbach', 'Berlin'],
                   'Address': ['52 Aachen, Germany', '86 Augsburg, Germany', '51 Bergisch Gladbach, Germany', 'Berlin, Germany']})

# Apply the calculate_distance function to the 'City' and 'Address' columns, passing an additional parameter
df['Distance'] = df.apply(lambda row, additional_parameter=10: calculate_distance(row['City'], row['Address'], additional_parameter), axis=1)

# Print the DataFrame
print(df)

